on:
  push:
    branches: ["**"]
    tags: ["v*"]
  pull_request:
    branches: ["**"]

name: CI

jobs:
  check:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rustup
        run: |
          sudo apt-get update
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          echo "export PATH=\$HOME/.cargo/bin:\$PATH:/usr/bin" >> $GITHUB_ENV
        shell: bash

      - name: Rust Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Setup Rust Environment
        run: |
          rustup component add rustfmt
          rustup component add clippy
          rustup target add riscv32imc-unknown-none-elf
          rustup target add riscv32imac-unknown-none-elf
          sudo apt-get install build-essential
          sudo apt-get install -y libudev-dev
          sudo apt install pkg-config
          cargo update
          export PATH=$(pwd)/aarch64-linux-musl-cross/bin:$PATH
        shell: bash

      - name: Rustfmt
        run: cargo fmt --all -- --check
        continue-on-error: false

      #- name: Clippy (esp32c2)
      #  run: cargo clippy --target riscv32imc-unknown-none-elf --features esp32c2 -- -D warnings
      #  continue-on-error: false

      #- name: Clippy (esp32c3)
      #  run: cargo clippy --target riscv32imc-unknown-none-elf --features esp32c3 -- -D warnings
      #  continue-on-error: false

      #- name: Clippy (esp32h2)
      #  run: cargo clippy --target riscv32imc-unknown-none-elf --features esp32h2 -- -D warnings
      #  continue-on-error: false

      - name: Clippy (esp32c6)
        run: cargo clippy --target riscv32imac-unknown-none-elf --features esp32c6 -- -D warnings
        continue-on-error: false

      #- name: Clippy (ESP32)
      #  run: cargo clippy --target xtensa-esp32-none-elf --features esp32 -- -D warnings
      #  continue-on-error: false

      #- name: Clippy (esp32s2)
      #  run: cargo clippy --target xtensa-esp32s2-none-elf --features esp32s2 -- -D warnings
      #  continue-on-error: false

      #- name: Clippy (esp32s3)
      #  run: cargo clippy --target xtensa-esp32s3-none-elf --features esp32s3 -- -D warnings
      #  continue-on-error: false
#  build:
#    name: Build Firmware
#    runs-on: ubuntu-latest
#    needs: check
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#     - name: Install Rustup
#       run: |
#         sudo apt-get update
#         curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
#         echo "export PATH=\$HOME/.cargo/bin:\$PATH:/usr/bin" >> $GITHUB_ENV
#       shell: bash
#
#     - name: Rust Cache
#       uses: actions/cache@v3
#       with:
#         path: |
#           ~/.cargo/registry
#           ~/.cargo/git
#           target
#         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#         restore-keys: ${{ runner.os }}-cargo-
#
#     - name: Setup Rust Environment
#       run: |
#         rustup target add riscv32imc-unknown-none-elf
#         rustup target add riscv32imac-unknown-none-elf
#         sudo apt-get install build-essential
#         sudo apt-get install -y python3 python3-pip
#         pip3 install esptool
#         cargo update
#       shell: bash
#
#     - name: Build esp32c3
#       run: cargo build --release --target riscv32imc-unknown-none-elf --features esp32c3
#
#     - name: Build esp32c6
#       run: cargo build --release --target riscv32imac-unknown-none-elf --features esp32c6
#
#     - name: Convert ELF to BIN and HEX (esp32c3)
#       run: |
#         # Get the name of the ELF file (assumes there's only one or uses the main one)
#         ELF_FILE=$(find target/riscv32imc-unknown-none-elf/release -name "*.elf" | head -n 1)
#         BASENAME=$(basename "$ELF_FILE" .elf)
#         OUTPUT_DIR="firmware-output/esp32c3"
#         mkdir -p "$OUTPUT_DIR"
#
#         # Create BIN file
#         esptool.py --chip esp32c3 elf2image --output "$OUTPUT_DIR/$BASENAME.bin" "$ELF_FILE"
#
#         # Create HEX file
#         riscv32-elf-objcopy -O ihex "$ELF_FILE" "$OUTPUT_DIR/$BASENAME.hex" || \
#         riscv32-unknown-elf-objcopy -O ihex "$ELF_FILE" "$OUTPUT_DIR/$BASENAME.hex" || \
#         echo "Warning: Could not create HEX file, objcopy not available"
#
#         # Copy original ELF for completeness
#         cp "$ELF_FILE" "$OUTPUT_DIR/"
#       shell: bash
#
#     - name: Convert ELF to BIN and HEX (esp32c6)
#       run: |
#         # Get the name of the ELF file
#         ELF_FILE=$(find target/riscv32imac-unknown-none-elf/release -name "*.elf" | head -n 1)
#         BASENAME=$(basename "$ELF_FILE" .elf)
#         OUTPUT_DIR="firmware-output/esp32c6"
#         mkdir -p "$OUTPUT_DIR"
#
#         # Create BIN file
#         esptool.py --chip esp32c6 elf2image --output "$OUTPUT_DIR/$BASENAME.bin" "$ELF_FILE"
#
#         # Create HEX file
#         riscv32-elf-objcopy -O ihex "$ELF_FILE" "$OUTPUT_DIR/$BASENAME.hex" || \
#         riscv32-unknown-elf-objcopy -O ihex "$ELF_FILE" "$OUTPUT_DIR/$BASENAME.hex" || \
#         echo "Warning: Could not create HEX file, objcopy not available"
#
#         # Copy original ELF for completeness
#         cp "$ELF_FILE" "$OUTPUT_DIR/"
#       shell: bash
#
#     - name: Upload artifacts
#       uses: actions/upload-artifact@v3
#       with:
#         name: firmware-binaries
#         path: firmware-output
#         retention-days: 7
#  test:
#    name: Run Tests
#    runs-on: ubuntu-latest
#    needs: check
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Install Rustup
#        run: |
#          sudo apt-get update
#          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
#          echo "export PATH=\$HOME/.cargo/bin:\$PATH:/usr/bin" >> $GITHUB_ENV
#        shell: bash
#
#      - name: Rust Cache
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.cargo/registry
#            ~/.cargo/git
#            target
#          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#          restore-keys: ${{ runner.os }}-cargo-
#
#      - name: Run tests
#        run: cargo test --workspace
#
#  release:
#    name: Create Release
#    runs-on: ubuntu-latest
#    needs: [build, test]
#    if: startsWith(github.ref, 'refs/tags/v')
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Download artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: firmware-binaries
#          path: release-binaries
#
#      - name: Create Release
#        id: create_release
#        uses: softprops/action-gh-release@v1
#        with:
#          name: Release ${{ github.ref_name }}
#          draft: false
#          prerelease: false
#          generate_release_notes: true
#          files: |
#            release-binaries/**/*.bin
#            release-binaries/**/*.hex
#            release-binaries/**/*.elf
